[slip]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => _
callData: #abiCallData("slip", #bytes32(I), #address(Guy), #int256(Wad))
localMem: _
pc: 0 => _
wordStack: .WordStack => _
gas: Gas => _
log: _
callDepth: _
refund: _ => _
storage:
  // 0 |-> Root
  //  (#hashedLocation("Solidity", 1, Lad) |-> #unsigned(Dai_l))
  //  (#hashedLocation("Solidity", 2, Lad) |-> #unsigned(Sin_l))
  //  (#hashedLocation("Solidity", 3, I) +Int 0 |-> #unsigned(Rate_i))
  //  (#hashedLocation("Solidity", 3, I) +Int 1 |-> #unsigned(Art_i))
  (#hashedLocation("Solidity", 4, I Guy) +Int 0 |-> (#unsigned(Gem_u) => #unsigned(Gem_u +Int Wad)))
  //  (#hashedLocation("Solidity", 4, I Guy) +Int 1 |-> #unsigned(Ink_u))
  //  (#hashedLocation("Solidity", 4, I Guy) +Int 2 |-> #unsigned(Art_u))
  //  5 |-> #unsigned(Tab)
  //  6 |-> #unsigned(Vice)
  _:Map
activeaccounts:
accounts:
requires:
  andBool Gas >Int 100000
  
  // storage data
  andBool #rangeAddress(Root)
  andBool #rangeAddress(Lad)
  andBool #rangeSInt(256, Dai_l)
  andBool #rangeSInt(256, Sin_l)
  andBool #rangeSInt(256, Rate_i)
  andBool #rangeSInt(256, Art_i)
  andBool #rangeSInt(256, Gem_u)
  andBool #rangeSInt(256, Ink_u)
  andBool #rangeSInt(256, Art_u)
  andBool #rangeSInt(256, Tab)
  andBool #rangeSInt(256, Vice)

  // call data
  andBool #rangeBytes(32, I)  
  andBool #rangeAddress(Guy)
  andBool #rangeSInt(256, Wad)

  // success conditions (in order):
  andBool #rangeSInt(256, Gem_u +Int Wad)

attribute:

