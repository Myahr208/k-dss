[heal]
k: #execute => #halt
statusCode: _ => EVMC_SUCCESS
output: _ => _
callData: #abiCallData("heal", #address(U), #address(V), #int256(Wad))
localMem: _
pc: 0 => _
wordStack: .WordStack => _
gas: Gas => _
log: _
callDepth: _
refund: _ => _
storage:
0 |-> Root
(#hashedLocation("Solidity", 1, V) |-> (#unsigned(Dai_v) => #unsigned(Dai_v -Int Wad))
(#hashedLocation("Solidity", 2, U) |-> (#unsigned(Sin_u) => #unsigned(Sin_u -Int Wad))
(#hashedLocation("Solidity", 3, I) |-> (#IlkStruct Rate_i Art_i)
(#hashedLocation("Solidity", 4, I Guy) |-> ((#UrnStruct Gem_u Ink_u Art_u) => (#UrnStruct (Gem_u +Int Wad) Ink_u Art_u)
5 |-> (#unsigned(Tab) => #unsigned(Tab -Int Wad))
6 |-> (#unsigned(Vice) => #unsigned(Vice -Int Wad))
  _:Map
activeaccounts:
accounts:
requires:
  andBool Gas >Int 100000
  
  // storage data
  andBool #rangeAddress(Lad)  
  andBool #rangeSInt(256, Dai_v)
  andBool #rangeSInt(256, Sin_u)
  andBool #rangeSInt(256, Rate_i)
  andBool #rangeSInt(256, Art_i)
  andBool #rangeSInt(256, Gem_u)
  andBool #rangeSInt(256, Ink_u)
  andBool #rangeSInt(256, Art_u)
  andBool #rangeSInt(256, Tab)
  andBool #rangeSInt(256, Vice)

  // call data
  andBool #rangeAddress(U)
  andBool #rangeAddress(V)
  andBool #rangeSInt(256, Wad)

  // success conditions (in order):
  andBool (Sin_u >=Int Wad)
  andBool (Sin_u >=Int Wad)
  andBool (Vice >=Int Wad)
  andBool (Tab >=Int Wad)
  andBool #rangeSInt(256, Dai_v -Int Wad)
  andBool #rangeSInt(256, Sin_u -Int Wad)
  andBool #rangeSInt(256, Tab -Int Wad)
  andBool #rangeSInt(256, Vice -Int Wad)

attribute:

