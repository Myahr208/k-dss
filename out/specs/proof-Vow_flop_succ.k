requires "../rules.k"

module PROOF-VOW_FLOP_SUCC
  imports ETHEREUM-SIMULATION
  imports EVM
  imports RULES

// Vow_flop
rule
  <k> #execute ~> CONTINUATION => #halt ~> CONTINUATION </k>
  <exit-code> 1 </exit-code>
  <mode> NORMAL </mode>
  <schedule> BYZANTIUM </schedule>
  <analysis> .Map </analysis>
  <ethereum>
    <evm>
      <output> _ => #asByteStackInWidthaux(1 +Int Kicks, 31, 32, .WordStack) </output>
      <statusCode> _ => EVMC_SUCCESS </statusCode>
      <callStack> VCallStack </callStack>
      <interimStates> _ </interimStates>
      <touchedAccounts> _ => _ </touchedAccounts>
      <callState>
        <program> #asMapOpCodes(#dasmOpCodes(#parseByteStack("0x608060405234801561001057600080fd5b507c01000000000000000000000000000000000000000000000000000000006000350463bf353dbb8114156100575761004c6004356000610877565b805460405260206040f35b6365fae35e8114156100885761006b610860565b1561007557600080fd5b6100826004356000610877565b60018155005b639c52a7f18114156100b95761009c610860565b156100a657600080fd5b6100b36004356000610877565b60008155005b6336569e778114156100d15760015460405260206040f35b63dfbf306d8114156100e95760025460405260206040f35b6370904ded8114156101015760035460405260206040f35b637f49edc48114156101255761011a6004356004610877565b805460405260206040f35b63d0adc35f81141561013d5760055460405260206040f35b632a1d2b3c8114156101555760075460405260206040f35b6364bd701381141561016d5760085460405260206040f35b63c349d3628114156101855760095460405260206040f35b6368110b2f81141561019d57600a5460405260206040f35b631b8e8cfa8114156101b557600b5460405260206040f35b6329ae8114811415610299576101c9610860565b156101d357600080fd5b7f77616974000000000000000000000000000000000000000000000000000000006004351415610204576024356008555b7f73756d70000000000000000000000000000000000000000000000000000000006004351415610235576024356009555b7f62756d7000000000000000000000000000000000000000000000000000000000600435141561026657602435600a555b7f68756d7000000000000000000000000000000000000000000000000000000000600435141561029757602435600b555b005b63d4e8be8381141561034c576102ad610860565b156102b757600080fd5b7f666c61700000000000000000000000000000000000000000000000000000000060043514156102e8576024356002555b7f666c6f70000000000000000000000000000000000000000000000000000000006004351415610319576024356003555b7f7661740000000000000000000000000000000000000000000000000000000000600435141561034a576024356001555b005b6305db453881141561036957610360610769565b60405260206040f35b6307a832b48114156103865761037d6107d2565b60405260206040f35b6349dd5bb28114156103a35761039a61083b565b60405260206040f35b63697efb788114156103ee576103b7610860565b156103c157600080fd5b6103cc426004610877565b6103d9600435825461088e565b81556103e960043560055461088e565b600555005b6335aee16f811415610438574261040960085460043561088e565b111561041457600080fd5b6104216004356004610877565b805461042f816005546108a8565b60055560008255005b63f37ac61c8114156104b45761045c6b033b2e3c9fd0803ce80000006004356108c2565b600081121561046a57600080fd5b7f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af115156104b257600080fd5b005b632506855a811415610542576007546104db6b033b2e3c9fd0803ce80000006004356108c2565b60008112156104e957600080fd5b6104f5600435836108a8565b6007557f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af1151561054057600080fd5b005b63bbbb0d7b8114156105f9576009548061055a61083b565b101561056557600080fd5b600061056f6107d2565b14151561057b57600080fd5b6105878160075461088e565b6007557fb7e9cd2400000000000000000000000000000000000000000000000000000000600052306004527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602452806044526020604060646000806003545af115156105f357600080fd5b60206040f35b630e01198b81141561076457600a54610624600b5461061f8361061a610769565b61088e565b61088e565b61062c6107d2565b101561063757600080fd5b600061064161083b565b14151561064d57600080fd5b7ff4b9fa75000000000000000000000000000000000000000000000000000000006000526020604060046000806002545af1151561068a57600080fd5b6040517fa3b22fc4000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080855af115156106cd57600080fd5b7fb7e9cd2400000000000000000000000000000000000000000000000000000000600052306004528160245260006044526020604060646000806002545af1151561071757600080fd5b6040517fdc4d20fa000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080865af1151561075a57600080fd5b8060405260206040f35b600080fd5b60007fa60f1d3e00000000000000000000000000000000000000000000000000000000600052306004526020600060246000806001545af115156107ac57600080fd5b60005160008110156107bd57600080fd5b6b033b2e3c9fd0803ce8000000810491505090565b60007ff53e4e6900000000000000000000000000000000000000000000000000000000600052306004526020600060246000806001545af1151561081557600080fd5b600051600081101561082657600080fd5b6b033b2e3c9fd0803ce8000000810491505090565b600061085b600754610856600554610851610769565b6108a8565b6108a8565b905090565b600061086d336000610877565b5460011415905090565b600082600052816020526040600020905092915050565b60008282019050818110156108a257600080fd5b92915050565b60008282039050818111156108bc57600080fd5b92915050565b600082820290508183820414600084141715156108de57600080fd5b929150505600a165627a7a723058203ef3c7bfd72f2b08e93392cfe20bb7adf37abebb59c39ac3d71375c0c616f2c70029"), BYZANTIUM)) </program>
        <programBytes> #parseByteStack("0x608060405234801561001057600080fd5b507c01000000000000000000000000000000000000000000000000000000006000350463bf353dbb8114156100575761004c6004356000610877565b805460405260206040f35b6365fae35e8114156100885761006b610860565b1561007557600080fd5b6100826004356000610877565b60018155005b639c52a7f18114156100b95761009c610860565b156100a657600080fd5b6100b36004356000610877565b60008155005b6336569e778114156100d15760015460405260206040f35b63dfbf306d8114156100e95760025460405260206040f35b6370904ded8114156101015760035460405260206040f35b637f49edc48114156101255761011a6004356004610877565b805460405260206040f35b63d0adc35f81141561013d5760055460405260206040f35b632a1d2b3c8114156101555760075460405260206040f35b6364bd701381141561016d5760085460405260206040f35b63c349d3628114156101855760095460405260206040f35b6368110b2f81141561019d57600a5460405260206040f35b631b8e8cfa8114156101b557600b5460405260206040f35b6329ae8114811415610299576101c9610860565b156101d357600080fd5b7f77616974000000000000000000000000000000000000000000000000000000006004351415610204576024356008555b7f73756d70000000000000000000000000000000000000000000000000000000006004351415610235576024356009555b7f62756d7000000000000000000000000000000000000000000000000000000000600435141561026657602435600a555b7f68756d7000000000000000000000000000000000000000000000000000000000600435141561029757602435600b555b005b63d4e8be8381141561034c576102ad610860565b156102b757600080fd5b7f666c61700000000000000000000000000000000000000000000000000000000060043514156102e8576024356002555b7f666c6f70000000000000000000000000000000000000000000000000000000006004351415610319576024356003555b7f7661740000000000000000000000000000000000000000000000000000000000600435141561034a576024356001555b005b6305db453881141561036957610360610769565b60405260206040f35b6307a832b48114156103865761037d6107d2565b60405260206040f35b6349dd5bb28114156103a35761039a61083b565b60405260206040f35b63697efb788114156103ee576103b7610860565b156103c157600080fd5b6103cc426004610877565b6103d9600435825461088e565b81556103e960043560055461088e565b600555005b6335aee16f811415610438574261040960085460043561088e565b111561041457600080fd5b6104216004356004610877565b805461042f816005546108a8565b60055560008255005b63f37ac61c8114156104b45761045c6b033b2e3c9fd0803ce80000006004356108c2565b600081121561046a57600080fd5b7f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af115156104b257600080fd5b005b632506855a811415610542576007546104db6b033b2e3c9fd0803ce80000006004356108c2565b60008112156104e957600080fd5b6104f5600435836108a8565b6007557f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af1151561054057600080fd5b005b63bbbb0d7b8114156105f9576009548061055a61083b565b101561056557600080fd5b600061056f6107d2565b14151561057b57600080fd5b6105878160075461088e565b6007557fb7e9cd2400000000000000000000000000000000000000000000000000000000600052306004527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602452806044526020604060646000806003545af115156105f357600080fd5b60206040f35b630e01198b81141561076457600a54610624600b5461061f8361061a610769565b61088e565b61088e565b61062c6107d2565b101561063757600080fd5b600061064161083b565b14151561064d57600080fd5b7ff4b9fa75000000000000000000000000000000000000000000000000000000006000526020604060046000806002545af1151561068a57600080fd5b6040517fa3b22fc4000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080855af115156106cd57600080fd5b7fb7e9cd2400000000000000000000000000000000000000000000000000000000600052306004528160245260006044526020604060646000806002545af1151561071757600080fd5b6040517fdc4d20fa000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080865af1151561075a57600080fd5b8060405260206040f35b600080fd5b60007fa60f1d3e00000000000000000000000000000000000000000000000000000000600052306004526020600060246000806001545af115156107ac57600080fd5b60005160008110156107bd57600080fd5b6b033b2e3c9fd0803ce8000000810491505090565b60007ff53e4e6900000000000000000000000000000000000000000000000000000000600052306004526020600060246000806001545af1151561081557600080fd5b600051600081101561082657600080fd5b6b033b2e3c9fd0803ce8000000810491505090565b600061085b600754610856600554610851610769565b6108a8565b6108a8565b905090565b600061086d336000610877565b5460011415905090565b600082600052816020526040600020905092915050565b60008282019050818110156108a257600080fd5b92915050565b60008282039050818111156108bc57600080fd5b92915050565b600082820290508183820414600084141715156108de57600080fd5b929150505600a165627a7a723058203ef3c7bfd72f2b08e93392cfe20bb7adf37abebb59c39ac3d71375c0c616f2c70029") </programBytes>
        <id> ACCT_ID </id>
        <caller> CALLER_ID </caller>
        <callData> #abiCallData("flop", .TypedArgs) </callData>
        <callValue> 0 </callValue>
        <wordStack> .WordStack => _ </wordStack>
        <localMem> .Map => _ </localMem>
        <pc> 0 => _ </pc>
        <gas> VGas => _ </gas>
        <memoryUsed> 0 => _ </memoryUsed>
        <previousGas> _ => _ </previousGas>
        <static> false </static>
        <callDepth> VCallDepth => _ </callDepth>
      </callState>
      <substate>
        <selfDestruct> VSelfDestruct </selfDestruct>
        <log> _ => VLog </log>
        <refund> _ => VRefund </refund>
      </substate>
      <gasPrice> _ </gasPrice>
      <origin> ORIGIN_ID </origin>
      <previousHash> _ </previousHash>
      <ommersHash> _ </ommersHash>
      <coinbase> _ </coinbase>
      <stateRoot> _ </stateRoot>
      <transactionsRoot> _ </transactionsRoot>
      <receiptsRoot> _ </receiptsRoot>
      <logsBloom> _ </logsBloom>
      <difficulty> _ </difficulty>
      <number> _ </number>
      <gasLimit> _ </gasLimit>
      <gasUsed> _ </gasUsed>
      <timestamp> TIME </timestamp>
      <extraData> _ </extraData>
      <mixHash> _ </mixHash>
      <blockNonce> _ </blockNonce>
      <ommerBlockHeaders> _ </ommerBlockHeaders>
      <blockhash> _ </blockhash>
    </evm>
    <network>
      <activeAccounts> SetItem(ACCT_ID)
      SetItem(Row)
      SetItem(Vat) _ </activeAccounts>
      <accounts>
        <account>
          <acctID> Row </acctID>
          <balance> Row_balance </balance>
          <code> #parseByteStack("0x6080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634423c5f1146100ca5780634e8b1dd5146101a65780635ff3a382146101e157806365fae35e146102225780637bd2bea7146102655780637d780d82146102bc5780639c52a7f1146102e7578063b7e9cd241461032a578063bf353dbb14610395578063c959c42b146103ec578063cfc4af5514610419578063cfdd330214610454578063f4b9fa751461047f575b600080fd5b3480156100d657600080fd5b506100f5600480360381019080803590602001909291905050506104d6565b604051808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018465ffffffffffff1665ffffffffffff1681526020018365ffffffffffff1665ffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b3480156101b257600080fd5b506101bb610576565b604051808265ffffffffffff1665ffffffffffff16815260200191505060405180910390f35b3480156101ed57600080fd5b5061022060048036038101908080359060200190929190803590602001909291908035906020019092919050505061058e565b005b34801561022e57600080fd5b50610263600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109ef565b005b34801561027157600080fd5b5061027a610b30565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c857600080fd5b506102d1610b56565b6040518082815260200191505060405180910390f35b3480156102f357600080fd5b50610328600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b5c565b005b34801561033657600080fd5b5061037f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610c9d565b6040518082815260200191505060405180910390f35b3480156103a157600080fd5b506103d6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f1e565b6040518082815260200191505060405180910390f35b3480156103f857600080fd5b5061041760048036038101908080359060200190929190505050610f36565b005b34801561042557600080fd5b5061042e61126a565b604051808265ffffffffffff1665ffffffffffff16815260200191505060405180910390f35b34801561046057600080fd5b50610469611282565b6040518082815260200191505060405180910390f35b34801561048b57600080fd5b50610494611288565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60016020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900465ffffffffffff169080600201601a9054906101000a900465ffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b600560009054906101000a900465ffffffffffff1681565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a460006001600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561069557600080fd5b426001600087815260200190815260200160002060020160149054906101000a900465ffffffffffff1665ffffffffffff161180610703575060006001600087815260200190815260200160002060020160149054906101000a900465ffffffffffff1665ffffffffffff16145b151561070e57600080fd5b4260016000878152602001908152602001600020600201601a9054906101000a900465ffffffffffff1665ffffffffffff1611151561074c57600080fd5b60016000868152602001908152602001600020600001548314151561077057600080fd5b60016000868152602001908152602001600020600101548410151561079457600080fd5b60016000868152602001908152602001600020600101546b033b2e3c9fd0803ce80000006107c4600454876112ae565b8115156107cd57fe5b04111515156107db57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb35783b336001600089815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561090a57600080fd5b505af115801561091e573d6000803e3d6000fd5b50505050336001600087815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360016000878152602001908152602001600020600101819055506109b042600560009054906101000a900465ffffffffffff166112ef565b6001600087815260200190815260200160002060020160146101000a81548165ffffffffffff021916908365ffffffffffff1602179055505050505050565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a460016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610ae757600080fd5b60016000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a460016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610c5457600080fd5b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610cec57600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600654101515610d1c57600080fd5b6006600081546001019190508190559050336001600083815260200190815260200160002060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816001600083815260200190815260200160002060000181905550826001600083815260200190815260200160002060010181905550836001600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e2b42600560069054906101000a900465ffffffffffff166112ef565b60016000838152602001908152602001600020600201601a6101000a81548165ffffffffffff021916908365ffffffffffff160217905550807fefa52d9342a199cb30efd2692463f2c2bef63cd7186b50382d4fb94ad207880e84848760016000878152602001908152602001600020600201601a9054906101000a900465ffffffffffff16604051808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018265ffffffffffff1665ffffffffffff16815260200194505050505060405180910390a29392505050565b60006020528060005260406000206000915090505481565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a4426001600085815260200190815260200160002060020160149054906101000a900465ffffffffffff1665ffffffffffff16108015611051575060006001600085815260200190815260200160002060020160149054906101000a900465ffffffffffff1665ffffffffffff1614155b8061108b57504260016000858152602001908152602001600020600201601a9054906101000a900465ffffffffffff1665ffffffffffff16105b151561109657600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f196001600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660016000878152602001908152602001600020600101546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156111a757600080fd5b505af11580156111bb573d6000803e3d6000fd5b505050506001600084815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160146101000a81549065ffffffffffff021916905560028201601a6101000a81549065ffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050505050565b600560069054906101000a900465ffffffffffff1681565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008183029050600081121515156112c557600080fd5b60008214806112de57508282828115156112db57fe5b04145b15156112e957600080fd5b92915050565b600081830190508265ffffffffffff168165ffffffffffff161015151561131557600080fd5b929150505600a165627a7a72305820cb90476f0c9148810bbbd114acb3079d74626eab367b3ebe8ab7ea60d6b382ac0029") </code>
          <storage> (_:Map
                      (#Flopper.ttl_tau |-> (#WordPackUInt48UInt48(Ttl, Tau))
                      (#Flopper.bids[1 +Int Kicks].guy_tic_end |-> (#WordPackAddrUInt48UInt48(Guy_was, Tic_was, End_was) => #WordPackAddrUInt48UInt48(ACCT_ID, Tic_was, TIME +Int Tau))
                      (#Flopper.bids[1 +Int Kicks].lot |-> (Lot_was => maxUInt256)
                      (#Flopper.bids[1 +Int Kicks].bid |-> (Bid_was => Sump)
                      (#Flopper.bids[1 +Int Kicks].vow |-> (Vow_was => ACCT_ID)
                      (#Flopper.kicks |-> (Kicks => 1 +Int Kicks)
                      (#Flopper.wards[ACCT_ID] |-> (Can))))))))) </storage>
          <nonce> _ </nonce>
        </account>
        <account>
          <acctID> Vat </acctID>
          <balance> Vat_balance </balance>
          <code> #parseByteStack("0x608060405234801561001057600080fd5b507c01000000000000000000000000000000000000000000000000000000006000350463bf353dbb8114156100575761004c600435600061067e565b805460405260206040f35b6365fae35e8114156100885761006b610667565b1561007557600080fd5b610082600435600061067e565b60018155005b639c52a7f18114156100b95761009c610667565b156100a657600080fd5b6100b3600435600061067e565b60008155005b63d9638d368114156100f5576100d2600435600161067e565b805460405260018101546060526002810154608052600381015460a05260806040f35b6326e27482811415610123576101116024356004356002610695565b80546040526001810154606052604080f35b63c091268381141561014a5761013f6024356004356003610695565b805460405260206040f35b63f53e4e6981141561016e57610163600435600461067e565b805460405260206040f35b63a60f1d3e81141561019257610187600435600561067e565b805460405260206040f35b630dca59c18114156101aa5760065460405260206040f35b632d61a3558114156101c25760075460405260206040f35b633b663195811415610233576101d6610667565b156101e057600080fd5b6101ed600435600161067e565b600081541415156101fd57600080fd5b6000600182015414151561021057600080fd5b6b033b2e3c9fd0803ce800000081556b033b2e3c9fd0803ce80000006001820155005b6378f1947081141561028b57610247610667565b1561025157600080fd5b61025e600435600461067e565b61026b60443582546106f6565b815561027a602435600461067e565b61028760443582546106b9565b8155005b6342066cbb8114156102ca5761029f610667565b156102a957600080fd5b6102b96024356004356003610695565b6102c660443582546106b9565b8155005b63a6e41821811415610328576102de610667565b156102e857600080fd5b6102f86024356004356003610695565b61030560643582546106f6565b81556103176044356004356003610695565b61032460643582546106b9565b8155005b635dd6471a8114156104165761033c610667565b1561034657600080fd5b6103566024356004356002610695565b61036360843582546106b9565b815561037560a43560018301546106b9565b6001820155610387600435600161067e565b61039760843560028301546106b9565b60028201556103ac60a43560038301546106b9565b60038201556103be6084358254610733565b6103ce6044356004356003610695565b6103d98282546106f6565b81556103eb60a4356001850154610733565b6103f8606435600461067e565b6104038282546106b9565b8155610411826006546106b9565b600655005b633690ae4c8114156105045761042a610667565b1561043457600080fd5b6104446024356004356002610695565b61045160843582546106b9565b815561046360a43560018301546106b9565b6001820155610475600435600161067e565b61048560843560028301546106b9565b600282015561049a60a43560038301546106b9565b60038201556104ac6084358254610733565b6104bc6044356004356003610695565b6104c78282546106f6565b81556104d960a4356001850154610733565b6104e6606435600561067e565b6104f18282546106f6565b81556104ff826007546106f6565b600755005b63990a5f6381141561057e57610518610667565b1561052257600080fd5b61052f600435600561067e565b61053c60443582546106f6565b815561054b602435600461067e565b61055860443582546106f6565b81556105686044356007546106f6565b6007556105796044356006546106f6565b600655005b63e6a6a64d8114156105f957610592610667565b1561059c57600080fd5b6105a9600435600161067e565b6105b960443560018301546106b9565b60018201556105ce6044356003830154610733565b6105db602435600461067e565b6105e68282546106b9565b81556105f4826006546106b9565b600655005b6309b7a0b58114156106625761060d610667565b1561061757600080fd5b610624600435600161067e565b61063160443582546106b9565b81556106436044356002830154610733565b6106536024356004356003610695565b61065e8282546106f6565b8155005b600080fd5b600061067433600061067e565b5460011415905090565b600082600052816020526040600020905092915050565b60008360005282602052816040526040602020602052604060002090509392505050565b6000828201905060008313156106d85781811115156106d757600080fd5b5b60008312156106f05781811015156106ef57600080fd5b5b92915050565b60008282039050600083121561071557818111151561071457600080fd5b5b600083131561072d57818110151561072c57600080fd5b5b92915050565b60008282029050600082121561074857600080fd5b600083141515610763578183820514151561076257600080fd5b5b929150505600a165627a7a723058201fcd622e26e92262e34259d46a2cb321a6b6f16f239ee5bf5a42f6e2b76c16ac0029") </code>
          <storage> (_:Map
                      (#Vat.sin[ACCT_ID] |-> (Sin_v)
                      (#Vat.dai[ACCT_ID] |-> (Dai)))) </storage>
          <nonce> _ </nonce>
        </account>
        <account>
          <acctID> ACCT_ID </acctID>
          <balance> BAL </balance>
          <code> #parseByteStack("0x608060405234801561001057600080fd5b507c01000000000000000000000000000000000000000000000000000000006000350463bf353dbb8114156100575761004c6004356000610877565b805460405260206040f35b6365fae35e8114156100885761006b610860565b1561007557600080fd5b6100826004356000610877565b60018155005b639c52a7f18114156100b95761009c610860565b156100a657600080fd5b6100b36004356000610877565b60008155005b6336569e778114156100d15760015460405260206040f35b63dfbf306d8114156100e95760025460405260206040f35b6370904ded8114156101015760035460405260206040f35b637f49edc48114156101255761011a6004356004610877565b805460405260206040f35b63d0adc35f81141561013d5760055460405260206040f35b632a1d2b3c8114156101555760075460405260206040f35b6364bd701381141561016d5760085460405260206040f35b63c349d3628114156101855760095460405260206040f35b6368110b2f81141561019d57600a5460405260206040f35b631b8e8cfa8114156101b557600b5460405260206040f35b6329ae8114811415610299576101c9610860565b156101d357600080fd5b7f77616974000000000000000000000000000000000000000000000000000000006004351415610204576024356008555b7f73756d70000000000000000000000000000000000000000000000000000000006004351415610235576024356009555b7f62756d7000000000000000000000000000000000000000000000000000000000600435141561026657602435600a555b7f68756d7000000000000000000000000000000000000000000000000000000000600435141561029757602435600b555b005b63d4e8be8381141561034c576102ad610860565b156102b757600080fd5b7f666c61700000000000000000000000000000000000000000000000000000000060043514156102e8576024356002555b7f666c6f70000000000000000000000000000000000000000000000000000000006004351415610319576024356003555b7f7661740000000000000000000000000000000000000000000000000000000000600435141561034a576024356001555b005b6305db453881141561036957610360610769565b60405260206040f35b6307a832b48114156103865761037d6107d2565b60405260206040f35b6349dd5bb28114156103a35761039a61083b565b60405260206040f35b63697efb788114156103ee576103b7610860565b156103c157600080fd5b6103cc426004610877565b6103d9600435825461088e565b81556103e960043560055461088e565b600555005b6335aee16f811415610438574261040960085460043561088e565b111561041457600080fd5b6104216004356004610877565b805461042f816005546108a8565b60055560008255005b63f37ac61c8114156104b45761045c6b033b2e3c9fd0803ce80000006004356108c2565b600081121561046a57600080fd5b7f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af115156104b257600080fd5b005b632506855a811415610542576007546104db6b033b2e3c9fd0803ce80000006004356108c2565b60008112156104e957600080fd5b6104f5600435836108a8565b6007557f990a5f630000000000000000000000000000000000000000000000000000000060005230600452306024528060445260008060646000806001545af1151561054057600080fd5b005b63bbbb0d7b8114156105f9576009548061055a61083b565b101561056557600080fd5b600061056f6107d2565b14151561057b57600080fd5b6105878160075461088e565b6007557fb7e9cd2400000000000000000000000000000000000000000000000000000000600052306004527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602452806044526020604060646000806003545af115156105f357600080fd5b60206040f35b630e01198b81141561076457600a54610624600b5461061f8361061a610769565b61088e565b61088e565b61062c6107d2565b101561063757600080fd5b600061064161083b565b14151561064d57600080fd5b7ff4b9fa75000000000000000000000000000000000000000000000000000000006000526020604060046000806002545af1151561068a57600080fd5b6040517fa3b22fc4000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080855af115156106cd57600080fd5b7fb7e9cd2400000000000000000000000000000000000000000000000000000000600052306004528160245260006044526020604060646000806002545af1151561071757600080fd5b6040517fdc4d20fa000000000000000000000000000000000000000000000000000000006000526002546004526000806024600080865af1151561075a57600080fd5b8060405260206040f35b600080fd5b60007fa60f1d3e00000000000000000000000000000000000000000000000000000000600052306004526020600060246000806001545af115156107ac57600080fd5b60005160008110156107bd57600080fd5b6b033b2e3c9fd0803ce8000000810491505090565b60007ff53e4e6900000000000000000000000000000000000000000000000000000000600052306004526020600060246000806001545af1151561081557600080fd5b600051600081101561082657600080fd5b6b033b2e3c9fd0803ce8000000810491505090565b600061085b600754610856600554610851610769565b6108a8565b6108a8565b905090565b600061086d336000610877565b5460011415905090565b600082600052816020526040600020905092915050565b60008282019050818110156108a257600080fd5b92915050565b60008282039050818111156108bc57600080fd5b92915050565b600082820290508183820414600084141715156108de57600080fd5b929150505600a165627a7a723058203ef3c7bfd72f2b08e93392cfe20bb7adf37abebb59c39ac3d71375c0c616f2c70029") </code>
          <storage> (_:Map
                      (#Vow.sump |-> (Sump)
                      (#Vow.Ash |-> (Ash => Ash +Int Sump)
                      (#Vow.Sin |-> (Ssin)
                      (#Vow.vat |-> (Vat)
                      (#Vow.row |-> (Row)))))))
           </storage>
          <nonce> _ </nonce>
        </account>
       ... 
      </accounts>
      <txOrder> _ </txOrder>
      <txPending> _ </txPending>
      <messages> _ </messages>
    </network>
  </ethereum>
requires #rangeAddress(ACCT_ID)
andBool #notPrecompileAddress(ACCT_ID)
andBool #rangeAddress(CALLER_ID)
andBool #rangeAddress(ORIGIN_ID)
andBool #rangeUInt(48, TIME)
andBool #rangeUInt(256, BAL)
andBool VCallDepth <=Int 1024

    andBool (#rangeAddress(Row)
    andBool (#rangeAddress(Vat)
    andBool (#rangeUInt(256, Ssin)
    andBool (#rangeUInt(256, Ash)
    andBool (#rangeUInt(256, Sump)
    andBool (#rangeUInt(256, Can)
    andBool (#rangeUInt(256, Kicks)
    andBool (#rangeAddress(Vow_was)
    andBool (#rangeUInt(256, Lot_was)
    andBool (#rangeUInt(256, Bid_was)
    andBool (#rangeAddress(Guy_was)
    andBool (#rangeUInt(48, Tic_was)
    andBool (#rangeUInt(48, End_was)
    andBool (#rangeUInt(48, Ttl)
    andBool (#rangeUInt(48, Tau)
    andBool (#rangeUInt(256, Dai)
    andBool (#rangeUInt(256, Sin_v)
    andBool (#rangeUInt(256, Row_balance)
    andBool (#rangeUInt(256, Vat_balance)
    andBool (#notPrecompileAddress(Row)
    andBool (ACCT_ID =/=Int Row
    andBool (#notPrecompileAddress(Vat)
    andBool (ACCT_ID =/=Int Vat
    andBool (#notPrecompileAddress(Vow_was)
    andBool (ACCT_ID =/=Int Vow_was
    andBool (#notPrecompileAddress(Guy_was)
    andBool (ACCT_ID =/=Int Guy_was
    andBool (VGas >Int 300000
    andBool (Can ==Int 1
    andBool ((Sin_v /Int #Ray -Int Ssin) -Int Ash >=Int Sump
    andBool (Dai <Int #Ray
    andBool (VCallDepth <Int 1024
    andBool (#rangeUInt(48, TIME +Int Tau)
    andBool (#rangeUInt(256, Ash +Int Sump)
    andBool (#rangeUInt(256, Sin_v /Int #Ray -Int Ssin)
    andBool (#rangeUInt(256, (Sin_v /Int #Ray -Int Ssin) -Int Ash)
    andBool (#rangeUInt(256, 1 +Int Kicks))))))))))))))))))))))))))))))))))))))

endmodule
