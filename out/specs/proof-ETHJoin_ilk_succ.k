requires "../rules.k"

module PROOF-ETHJOIN_ILK_SUCC
  imports ETHEREUM-SIMULATION
  imports EVM
  imports RULES

// ilk
rule
  <k> #execute => #halt </k>
  <exit-code> 1 </exit-code>
  <mode> NORMAL </mode>
  <schedule> BYZANTIUM </schedule>
  <analysis> .Map </analysis>
  <ethereum>
    <evm>
      <output> _ => #asByteStackInWidthaux(Ilk, 31, 32, .WordStack) </output>
      <statusCode> _ => EVMC_SUCCESS </statusCode>
      <callStack> VCallStack </callStack>
      <interimStates> _ </interimStates>
      <touchedAccounts> _ => _ </touchedAccounts>
      <callState>
        <program> #asMapOpCodes(#dasmOpCodes(#parseByteStack("0x608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806336569e7714610067578063ad677d0b146100be578063c5ce281e146100e2578063ef693bed14610115575b600080fd5b34801561007357600080fd5b5061007c610162565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100e06004803603810190808035600019169060200190929190505050610187565b005b3480156100ee57600080fd5b506100f7610316565b60405180826000191660001916815260200191505060405180910390f35b34801561012157600080fd5b50610160600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061031c565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a46000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342066cbb600154856102896b033b2e3c9fd0803ce80000003461050f565b6040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018281526020019350505050600060405180830381600087803b1580156102f957600080fd5b505af115801561030d573d6000803e3d6000fd5b50505050505050565b60015481565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a48373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561040d573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342066cbb6001543373ffffffffffffffffffffffffffffffffffffffff1660010261047e6b033b2e3c9fd0803ce80000008861050f565b6000036040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018281526020019350505050600060405180830381600087803b1580156104f157600080fd5b505af1158015610505573d6000803e3d6000fd5b5050505050505050565b600081830290506000811215151561052657600080fd5b600082148061053f575082828281151561053c57fe5b04145b151561054a57600080fd5b929150505600a165627a7a723058204b1677a2fdb96d08cbe6e8fbbb547babe6a121ba3661b6509a7ff5157263376d0029"), BYZANTIUM)) </program>
        <programBytes> #parseByteStack("0x608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806336569e7714610067578063ad677d0b146100be578063c5ce281e146100e2578063ef693bed14610115575b600080fd5b34801561007357600080fd5b5061007c610162565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100e06004803603810190808035600019169060200190929190505050610187565b005b3480156100ee57600080fd5b506100f7610316565b60405180826000191660001916815260200191505060405180910390f35b34801561012157600080fd5b50610160600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061031c565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a46000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342066cbb600154856102896b033b2e3c9fd0803ce80000003461050f565b6040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018281526020019350505050600060405180830381600087803b1580156102f957600080fd5b505af115801561030d573d6000803e3d6000fd5b50505050505050565b60015481565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a48373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561040d573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342066cbb6001543373ffffffffffffffffffffffffffffffffffffffff1660010261047e6b033b2e3c9fd0803ce80000008861050f565b6000036040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018281526020019350505050600060405180830381600087803b1580156104f157600080fd5b505af1158015610505573d6000803e3d6000fd5b5050505050505050565b600081830290506000811215151561052657600080fd5b600082148061053f575082828281151561053c57fe5b04145b151561054a57600080fd5b929150505600a165627a7a723058204b1677a2fdb96d08cbe6e8fbbb547babe6a121ba3661b6509a7ff5157263376d0029") </programBytes>
        <id> ACCT_ID </id>
        <caller> CALLER_ID </caller>
        <callData> #abiCallData("ilk", .TypedArgs) </callData>
        <callValue> 0 </callValue>
        <wordStack> .WordStack => _ </wordStack>
        <localMem> .Map => _ </localMem>
        <pc> 0 => _ </pc>
        <gas> VGas => _ </gas>
        <memoryUsed> 0 => _ </memoryUsed>
        <previousGas> _ => _ </previousGas>
        <static> false </static>
        <callDepth> CALL_DEPTH => _ </callDepth>
      </callState>
      <substate>
        <selfDestruct> VSelfDestruct </selfDestruct>
        <log> _ => VLog </log>
        <refund> _ => VRefund </refund>
      </substate>
      <gasPrice> _ </gasPrice>
      <origin> ORIGIN_ID </origin>
      <previousHash> _ </previousHash>
      <ommersHash> _ </ommersHash>
      <coinbase> _ </coinbase>
      <stateRoot> _ </stateRoot>
      <transactionsRoot> _ </transactionsRoot>
      <receiptsRoot> _ </receiptsRoot>
      <logsBloom> _ </logsBloom>
      <difficulty> _ </difficulty>
      <number> _ </number>
      <gasLimit> _ </gasLimit>
      <gasUsed> _ </gasUsed>
      <timestamp> TIME </timestamp>
      <extraData> _ </extraData>
      <mixHash> _ </mixHash>
      <blockNonce> _ </blockNonce>
      <ommerBlockHeaders> _ </ommerBlockHeaders>
      <blockhash> _ </blockhash>
    </evm>
    <network>
      <activeAccounts> SetItem(ACCT_ID) </activeAccounts>
      <accounts>
        <account>
          <acctID> ACCT_ID </acctID>
          <balance> BAL </balance>
          <code> #parseByteStack("0x608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806336569e7714610067578063ad677d0b146100be578063c5ce281e146100e2578063ef693bed14610115575b600080fd5b34801561007357600080fd5b5061007c610162565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100e06004803603810190808035600019169060200190929190505050610187565b005b3480156100ee57600080fd5b506100f7610316565b60405180826000191660001916815260200191505060405180910390f35b34801561012157600080fd5b50610160600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061031c565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a46000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342066cbb600154856102896b033b2e3c9fd0803ce80000003461050f565b6040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018281526020019350505050600060405180830381600087803b1580156102f957600080fd5b505af115801561030d573d6000803e3d6000fd5b50505050505050565b60015481565b60008060043591506024359050806000191682600019163373ffffffffffffffffffffffffffffffffffffffff166000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19163460003660405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a48373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561040d573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342066cbb6001543373ffffffffffffffffffffffffffffffffffffffff1660010261047e6b033b2e3c9fd0803ce80000008861050f565b6000036040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180846000191660001916815260200183600019166000191681526020018281526020019350505050600060405180830381600087803b1580156104f157600080fd5b505af1158015610505573d6000803e3d6000fd5b5050505050505050565b600081830290506000811215151561052657600080fd5b600082148061053f575082828281151561053c57fe5b04145b151561054a57600080fd5b929150505600a165627a7a723058204b1677a2fdb96d08cbe6e8fbbb547babe6a121ba3661b6509a7ff5157263376d0029") </code>
          <storage> #ETHJoin.ilk |-> (Ilk)
                          _:Map
           </storage>
          <nonce> _ </nonce>
        </account>
       ... 
      </accounts>
      <txOrder> _ </txOrder>
      <txPending> _ </txPending>
      <messages> _ </messages>
    </network>
  </ethereum>
requires 0 <=Int ACCT_ID    andBool ACCT_ID    <Int (2 ^Int 160)
andBool 0 <=Int CALLER_ID  andBool CALLER_ID  <Int (2 ^Int 160)
andBool 0 <=Int ORIGIN_ID  andBool ORIGIN_ID  <Int (2 ^Int 160)
  andBool #rangeBytes(32, Ilk)

endmodule
